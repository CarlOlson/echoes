// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Example = function() { };
Example.main = function() {
	var canvas = window.document.createElement("code");
	canvas.style.color = "#007F0E";
	window.document.body.appendChild(canvas);
	Example.echo = new echo_Echo();
	Example.echo.addSystem(new Movement(Example.w,Example.h));
	Example.echo.addSystem(new Render(Example.w,Example.h,canvas));
	var _g = 0;
	while(_g < 1000) {
		_g++;
		Example.createGrass(Std.random(Example.w),Std.random(Example.h));
	}
	var _g1 = 0;
	while(_g1 < 100) {
		_g1++;
		Example.createTree(Std.random(Example.w),Std.random(Example.h));
	}
	var _g2 = 0;
	while(_g2 < 10) {
		_g2++;
		Example.createRabbit(Std.random(Example.w),Std.random(Example.h),3 - Math.random() * 6,3 - Math.random() * 6);
	}
	var d = Math.random() * Math.PI * 2;
	Example.createUnicorn(Std.random(Example.w),Std.random(Example.h),Math.cos(d) * 12,Math.sin(d) * 12);
	window.setInterval(function() {
		Example.echo.update(.100);
	},100);
};
Example.createGrass = function(x,y) {
	var _id_ = Example.echo.id();
	GenericComponentHolder_$Example_$Position.__MAP.h[_id_] = _$Example_Position_$Impl_$._new(x,y);
	GenericComponentHolder_$Example_$Sprite.__MAP.h[_id_] = new Sprite("<i>w</i>");
	var _g = 0;
	var _g1 = Example.echo.views;
	while(_g < _g1.length) {
		var _v_ = _g1[_g];
		++_g;
		_v_.addIfMatch(_id_);
	}
};
Example.createTree = function(x,y) {
	var _id_ = Example.echo.id();
	GenericComponentHolder_$Example_$Position.__MAP.h[_id_] = _$Example_Position_$Impl_$._new(x,y);
	GenericComponentHolder_$Example_$Sprite.__MAP.h[_id_] = new Sprite("<strong style=\"color:#4C1E00;\">T</strong>");
	var _g = 0;
	var _g1 = Example.echo.views;
	while(_g < _g1.length) {
		var _v_ = _g1[_g];
		++_g;
		_v_.addIfMatch(_id_);
	}
};
Example.createRabbit = function(x,y,vx,vy) {
	var id = Example.echo.id();
	var vel = _$Example_Velocity_$Impl_$._new(vx,vy);
	GenericComponentHolder_$Example_$Position.__MAP.h[id] = _$Example_Position_$Impl_$._new(x,y);
	GenericComponentHolder_$Example_$Velocity.__MAP.h[id] = vel;
	var _g = 0;
	var _g1 = Example.echo.views;
	while(_g < _g1.length) {
		var _v_ = _g1[_g];
		++_g;
		_v_.addIfMatch(id);
	}
	GenericComponentHolder_$Example_$Sprite.__MAP.h[id] = new Sprite("<span style=\"color:#606060;\"><b><i>b</i></b></span>");
	var _g2 = 0;
	var _g11 = Example.echo.views;
	while(_g2 < _g11.length) {
		var _v_1 = _g11[_g2];
		++_g2;
		_v_1.addIfMatch(id);
	}
};
Example.createUnicorn = function(x,y,vx,vy) {
	var _id_ = Example.echo.id();
	GenericComponentHolder_$Example_$Position.__MAP.h[_id_] = _$Example_Position_$Impl_$._new(x,y);
	GenericComponentHolder_$Example_$Velocity.__MAP.h[_id_] = _$Example_Velocity_$Impl_$._new(vx,vy);
	GenericComponentHolder_$Example_$Sprite.__MAP.h[_id_] = new Sprite("<strong style=\"color:#F0F0F0;background-color:#B200FF\">&</strong>");
	var _g = 0;
	var _g1 = Example.echo.views;
	while(_g < _g1.length) {
		var _v_ = _g1[_g];
		++_g;
		_v_.addIfMatch(_id_);
	}
};
var Vec2 = function(x,y) {
	this.x = x != null ? x : .0;
	this.y = y != null ? y : .0;
};
var _$Example_Velocity_$Impl_$ = {};
_$Example_Velocity_$Impl_$._new = function(x,y) {
	return new Vec2(x,y);
};
var _$Example_Position_$Impl_$ = {};
_$Example_Position_$Impl_$._new = function(x,y) {
	return new Vec2(x,y);
};
var Sprite = function(value) {
	this.value = value;
};
var echo_System = function() { };
echo_System.prototype = {
	activate: function(echo1) {
		this.echo = echo1;
	}
	,update: function(dt) {
	}
};
var Movement = function(w,h) {
	this.bodies = new View_$Example_$Position_$Example_$Velocity();
	this.w = w;
	this.h = h;
};
Movement.__super__ = echo_System;
Movement.prototype = $extend(echo_System.prototype,{
	update: function(dt) {
		var _g_vd;
		var _g_i;
		var list = this.bodies.entities;
		_g_i = -1;
		_g_vd = new ViewData_$Example_$Position_$Example_$Velocity();
		while(++_g_i < list.length) {
			_g_vd.id = list[_g_i];
			_g_vd.pos = GenericComponentHolder_$Example_$Position.__MAP.get(_g_vd.id);
			_g_vd.vel = GenericComponentHolder_$Example_$Velocity.__MAP.get(_g_vd.id);
			_g_vd.pos.x += _g_vd.vel.x * dt;
			_g_vd.pos.y += _g_vd.vel.y * dt;
			if(_g_vd.pos.x >= this.w) {
				_g_vd.pos.x -= this.w;
			}
			if(_g_vd.pos.x < 0) {
				_g_vd.pos.x += this.w;
			}
			if(_g_vd.pos.y >= this.h) {
				_g_vd.pos.y -= this.h;
			}
			if(_g_vd.pos.y < 0) {
				_g_vd.pos.y += this.h;
			}
		}
	}
	,activate: function(echo1) {
		echo_System.prototype.activate.call(this,echo1);
		this.echo.addView(this.bodies);
	}
});
var Render = function(w,h,canvas) {
	this.visuals = new View_$Example_$Position_$Example_$Sprite();
	this.h = 0;
	this.w = 0;
	this.canvas = canvas;
	this.w = w;
	this.h = h;
	this.world = [];
	var _g1 = 0;
	var _g = h;
	while(_g1 < _g) {
		var y = _g1++;
		this.world[y] = [];
		var _g3 = 0;
		var _g2 = w;
		while(_g3 < _g2) {
			var x = _g3++;
			this.world[y][x] = window.document.createElement("span");
			canvas.appendChild(this.world[y][x]);
		}
		canvas.appendChild(window.document.createElement("br"));
	}
};
Render.__super__ = echo_System;
Render.prototype = $extend(echo_System.prototype,{
	update: function(dt) {
		var _g1 = 0;
		var _g = this.h;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.w;
			while(_g3 < _g2) this.world[y][_g3++].innerHTML = ".";
		}
		var _g_vd;
		var _g_i;
		var list = this.visuals.entities;
		_g_i = -1;
		_g_vd = new ViewData_$Example_$Position_$Example_$Sprite();
		while(++_g_i < list.length) {
			_g_vd.id = list[_g_i];
			_g_vd.pos = GenericComponentHolder_$Example_$Position.__MAP.get(_g_vd.id);
			_g_vd.spr = GenericComponentHolder_$Example_$Sprite.__MAP.get(_g_vd.id);
			this.world[_g_vd.pos.y | 0][_g_vd.pos.x | 0].innerHTML = _g_vd.spr.value;
		}
	}
	,activate: function(echo1) {
		echo_System.prototype.activate.call(this,echo1);
		this.echo.addView(this.visuals);
	}
});
var GenericComponentHolder_$Example_$Position = function() { };
var GenericComponentHolder_$Example_$Sprite = function() { };
var GenericComponentHolder_$Example_$Velocity = function() { };
var List = function() {
	this.length = 0;
};
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var Std = function() { };
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var ViewData_$Example_$Position_$Example_$Sprite = function() {
};
var ViewData_$Example_$Position_$Example_$Velocity = function() {
};
var echo_ViewBase = function() {
	this.entities = [];
	this.onAdd = [];
	this.entitiesMap = new haxe_ds_IntMap();
};
echo_ViewBase.prototype = {
	activate: function(echo1) {
		this.echo = echo1;
		var _g_head = echo1.entities.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.addIfMatch(val);
		}
	}
	,test: function(id) {
		return false;
	}
	,addIfMatch: function(id) {
		if(!this.entitiesMap.exists(id) && this.test(id)) {
			this.entitiesMap.set(id,id);
			this.entities.push(id);
			var i = 0;
			var l = this.onAdd.length;
			while(i < l) {
				var listener = this.onAdd[i];
				if(listener != null) {
					listener(id);
					++i;
				} else {
					this.onAdd.splice(i,1);
					--l;
				}
			}
		}
	}
};
var View_$Example_$Position_$Example_$Sprite = function() {
	echo_ViewBase.call(this);
};
View_$Example_$Position_$Example_$Sprite.__super__ = echo_ViewBase;
View_$Example_$Position_$Example_$Sprite.prototype = $extend(echo_ViewBase.prototype,{
	test: function(id) {
		if(GenericComponentHolder_$Example_$Position.__MAP.h.hasOwnProperty(id)) {
			return GenericComponentHolder_$Example_$Sprite.__MAP.h.hasOwnProperty(id);
		} else {
			return false;
		}
	}
});
var View_$Example_$Position_$Example_$Velocity = function() {
	echo_ViewBase.call(this);
};
View_$Example_$Position_$Example_$Velocity.__super__ = echo_ViewBase;
View_$Example_$Position_$Example_$Velocity.prototype = $extend(echo_ViewBase.prototype,{
	test: function(id) {
		if(GenericComponentHolder_$Example_$Position.__MAP.h.hasOwnProperty(id)) {
			return GenericComponentHolder_$Example_$Velocity.__MAP.h.hasOwnProperty(id);
		} else {
			return false;
		}
	}
});
var echo_Echo = function() {
	this.entities = new List();
	this.views = [];
	this.systems = [];
};
echo_Echo.prototype = {
	update: function(dt) {
		var _g = 0;
		var _g1 = this.systems;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.update(dt);
		}
	}
	,addSystem: function(s) {
		s.activate(this);
		this.systems.push(s);
	}
	,addView: function(v) {
		v.activate(this);
		this.views.push(v);
	}
	,id: function() {
		var e = ++echo_Echo.__SEQUENCE;
		this.entities.add(e);
		return e;
	}
};
var haxe_IMap = function() { };
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
};
Example.w = 120;
Example.h = 40;
Movement.__meta__ = { fields : { w : { skip : null}, h : { skip : null}}};
Render.__meta__ = { fields : { visuals : { view : null}}};
GenericComponentHolder_$Example_$Position.__MAP = new haxe_ds_IntMap();
GenericComponentHolder_$Example_$Sprite.__MAP = new haxe_ds_IntMap();
GenericComponentHolder_$Example_$Velocity.__MAP = new haxe_ds_IntMap();
echo_Echo.__SEQUENCE = 0;
Example.main();
})();
