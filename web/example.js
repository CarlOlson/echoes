// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ComponentHolder_$Example_$Position = function() { };
var ComponentHolder_$Example_$Sprite = function() { };
var ComponentHolder_$Example_$Velocity = function() { };
var Example = function() { };
Example.main = function() {
	Example.echo = new echo_Echo();
	Example.echo.addSystem(new Movement(Example.w,Example.h));
	Example.echo.addSystem(new Render(Example.w,Example.h));
	var _g1 = 0;
	var _g = Example.h;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = Example.w;
		while(_g3 < _g2) {
			var x = _g3++;
			if(Math.random() > .5) {
				Example.grass(x,y);
			} else if(Math.random() > .5) {
				Example.tree(x,y);
			} else {
				Example.flower(x,y);
			}
		}
	}
	var _g4 = 0;
	while(_g4 < 10) {
		++_g4;
		var d = Math.random() * Math.PI * 2;
		Example.rabbit(Std.random(Example.w),Std.random(Example.h),Math.cos(d) * 2,Math.sin(d) * 2);
	}
	var d1 = Math.random() * Math.PI * 2;
	Example.tiger(Std.random(Example.w),Std.random(Example.h),Math.cos(d1) * 6,Math.sin(d1) * 6);
	window.setInterval(function() {
		Example.echo.update(.100);
	},100);
};
Example.grass = function(x,y) {
	var codes = ["&#x1F33E","&#x1F33F"];
	var _id_ = Example.echo.id();
	ComponentHolder_$Example_$Position.__MAP.h[_id_] = new Vec2(x,y);
	var this1 = ComponentHolder_$Example_$Sprite.__MAP;
	var value = codes[Std.random(codes.length)];
	var this2 = window.document.createElement("span");
	this2.style.position = "absolute";
	this2.innerHTML = value;
	this1.h[_id_] = this2;
	if(Example.echo.entitiesMap.exists(_id_)) {
		var _g_head = Example.echo.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(_id_);
		}
	}
};
Example.tree = function(x,y) {
	var codes = ["&#x1F332","&#x1F333"];
	var _id_ = Example.echo.id();
	ComponentHolder_$Example_$Position.__MAP.h[_id_] = new Vec2(x,y);
	var this1 = ComponentHolder_$Example_$Sprite.__MAP;
	var value = codes[Std.random(codes.length)];
	var this2 = window.document.createElement("span");
	this2.style.position = "absolute";
	this2.innerHTML = value;
	this1.h[_id_] = this2;
	if(Example.echo.entitiesMap.exists(_id_)) {
		var _g_head = Example.echo.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(_id_);
		}
	}
};
Example.flower = function(x,y) {
	var codes = ["&#x1F337","&#x1F339","&#x1F33B"];
	var _id_ = Example.echo.id();
	ComponentHolder_$Example_$Position.__MAP.h[_id_] = new Vec2(x,y);
	var this1 = ComponentHolder_$Example_$Sprite.__MAP;
	var value = codes[Std.random(codes.length)];
	var this2 = window.document.createElement("span");
	this2.style.position = "absolute";
	this2.innerHTML = value;
	this1.h[_id_] = this2;
	if(Example.echo.entitiesMap.exists(_id_)) {
		var _g_head = Example.echo.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(_id_);
		}
	}
};
Example.rabbit = function(x,y,vx,vy) {
	var this1 = new Vec2(x,y);
	var this2 = new Vec2(vx,vy);
	var this3 = window.document.createElement("span");
	this3.style.position = "absolute";
	this3.innerHTML = "&#x1F407;";
	var _id_ = Example.echo.id();
	ComponentHolder_$Example_$Position.__MAP.h[_id_] = this1;
	ComponentHolder_$Example_$Velocity.__MAP.h[_id_] = this2;
	ComponentHolder_$Example_$Sprite.__MAP.h[_id_] = this3;
	if(Example.echo.entitiesMap.exists(_id_)) {
		var _g_head = Example.echo.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(_id_);
		}
	}
};
Example.tiger = function(x,y,vx,vy) {
	var this1 = new Vec2(x,y);
	var this2 = new Vec2(vx,vy);
	var this3 = window.document.createElement("span");
	this3.style.position = "absolute";
	this3.innerHTML = "&#x1F405;";
	var _id_ = Example.echo.id();
	ComponentHolder_$Example_$Position.__MAP.h[_id_] = this1;
	ComponentHolder_$Example_$Velocity.__MAP.h[_id_] = this2;
	ComponentHolder_$Example_$Sprite.__MAP.h[_id_] = this3;
	if(Example.echo.entitiesMap.exists(_id_)) {
		var _g_head = Example.echo.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(_id_);
		}
	}
};
var Vec2 = function(x,y) {
	this.x = x != null ? x : .0;
	this.y = y != null ? y : .0;
};
var echo_System = function() {
	this.__id = -1;
};
echo_System.prototype = {
	activate: function(echo1) {
		this.echo = echo1;
	}
	,update: function(dt) {
	}
};
var Movement = function(w,h) {
	echo_System.call(this);
	this.__id = 1;
	this.w = w;
	this.h = h;
};
Movement.__super__ = echo_System;
Movement.prototype = $extend(echo_System.prototype,{
	update: function(dt) {
		var _g_vd;
		var _g_i;
		var list = this.bodies.entities;
		_g_i = -1;
		_g_vd = new ViewData_$Example_$Position_$Example_$Velocity();
		while(++_g_i < list.length) {
			_g_vd.id = list[_g_i];
			_g_vd.pos = ComponentHolder_$Example_$Position.__MAP.get(_g_vd.id);
			_g_vd.vel = ComponentHolder_$Example_$Velocity.__MAP.get(_g_vd.id);
			_g_vd.pos.x += _g_vd.vel.x * dt;
			_g_vd.pos.y += _g_vd.vel.y * dt;
			if(_g_vd.pos.x >= this.w) {
				_g_vd.pos.x -= this.w;
			}
			if(_g_vd.pos.x < 0) {
				_g_vd.pos.x += this.w;
			}
			if(_g_vd.pos.y >= this.h) {
				_g_vd.pos.y -= this.h;
			}
			if(_g_vd.pos.y < 0) {
				_g_vd.pos.y += this.h;
			}
		}
	}
	,activate: function(echo1) {
		if(!echo1.viewsMap.h.hasOwnProperty(1)) {
			echo1.addView(new View_$Example_$Position_$Example_$Velocity());
		}
		this.bodies = echo1.viewsMap.h[1];
		echo_System.prototype.activate.call(this,echo1);
	}
});
var Render = function(w,h) {
	echo_System.call(this);
	this.__id = 2;
	var canvas = window.document.createElement("code");
	this.world = [];
	var _g1 = 0;
	var _g = h;
	while(_g1 < _g) {
		var y = _g1++;
		this.world[y] = [];
		var _g3 = 0;
		var _g2 = w;
		while(_g3 < _g2) {
			var x = _g3++;
			var span = window.document.createElement("span");
			span.style.position = "fixed";
			span.style.left = "" + x * 16 + "px";
			span.style.top = "" + y * 16 + "px";
			this.world[y][x] = span;
			canvas.appendChild(span);
		}
		canvas.appendChild(window.document.createElement("br"));
	}
	window.document.body.appendChild(canvas);
};
Render.__super__ = echo_System;
Render.prototype = $extend(echo_System.prototype,{
	updateVisual: function(dt,pos,spr) {
		this.world[pos.y | 0][pos.x | 0].appendChild(spr);
	}
	,update: function(dt) {
		var _g_vd;
		var _g_i;
		var list = this.view_example_position_example_sprite.entities;
		_g_i = -1;
		_g_vd = new ViewData_$Example_$Position_$Example_$Sprite();
		while(++_g_i < list.length) {
			_g_vd.id = list[_g_i];
			_g_vd.pos = ComponentHolder_$Example_$Position.__MAP.get(_g_vd.id);
			_g_vd.spr = ComponentHolder_$Example_$Sprite.__MAP.get(_g_vd.id);
			this.updateVisual(dt,_g_vd.pos,_g_vd.spr);
		}
	}
	,activate: function(echo1) {
		if(!echo1.viewsMap.h.hasOwnProperty(2)) {
			echo1.addView(new View_$Example_$Position_$Example_$Sprite());
		}
		this.view_example_position_example_sprite = echo1.viewsMap.h[2];
		echo_System.prototype.activate.call(this,echo1);
	}
});
var List = function() {
	this.length = 0;
};
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
var Std = function() { };
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var ViewData_$Example_$Position_$Example_$Sprite = function() {
};
var ViewData_$Example_$Position_$Example_$Velocity = function() {
};
var echo_ViewBase = function() {
	this.entities = [];
	this.onAdded = [];
	this.__id = -1;
	this.entitiesMap = new haxe_ds_IntMap();
};
echo_ViewBase.prototype = {
	activate: function(echo1) {
		this.echo = echo1;
		var _g_head = echo1.entities.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.addIfMatch(val);
		}
	}
	,test: function(id) {
		return false;
	}
	,addIfMatch: function(id) {
		if(!this.entitiesMap.exists(id) && this.test(id)) {
			this.entitiesMap.set(id,id);
			this.entities.push(id);
			var i = 0;
			var l = this.onAdded.length;
			while(i < l) {
				var listener = this.onAdded[i];
				if(listener != null) {
					listener(id);
					++i;
				} else {
					this.onAdded.splice(i,1);
					--l;
				}
			}
		}
	}
};
var View_$Example_$Position_$Example_$Sprite = function() {
	echo_ViewBase.call(this);
	this.__id = 2;
};
View_$Example_$Position_$Example_$Sprite.__super__ = echo_ViewBase;
View_$Example_$Position_$Example_$Sprite.prototype = $extend(echo_ViewBase.prototype,{
	test: function(id) {
		if(ComponentHolder_$Example_$Position.__MAP.h.hasOwnProperty(id)) {
			return ComponentHolder_$Example_$Sprite.__MAP.h.hasOwnProperty(id);
		} else {
			return false;
		}
	}
});
var View_$Example_$Position_$Example_$Velocity = function() {
	echo_ViewBase.call(this);
	this.__id = 1;
};
View_$Example_$Position_$Example_$Velocity.__super__ = echo_ViewBase;
View_$Example_$Position_$Example_$Velocity.prototype = $extend(echo_ViewBase.prototype,{
	test: function(id) {
		if(ComponentHolder_$Example_$Position.__MAP.h.hasOwnProperty(id)) {
			return ComponentHolder_$Example_$Velocity.__MAP.h.hasOwnProperty(id);
		} else {
			return false;
		}
	}
});
var echo_Echo = function() {
	this.systems = new List();
	this.views = new List();
	this.entities = new List();
	this.systemsMap = new haxe_ds_IntMap();
	this.viewsMap = new haxe_ds_IntMap();
	this.entitiesMap = new haxe_ds_IntMap();
};
echo_Echo.prototype = {
	update: function(dt) {
		var _g_head = this.systems.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.update(dt);
		}
	}
	,addSystem: function(s) {
		if(!this.systemsMap.h.hasOwnProperty(s.__id)) {
			this.systemsMap.h[s.__id] = s;
			this.systems.add(s);
			s.activate(this);
		}
	}
	,addView: function(v) {
		if(!this.viewsMap.h.hasOwnProperty(v.__id)) {
			this.viewsMap.h[v.__id] = v;
			this.views.add(v);
			v.activate(this);
		}
	}
	,id: function() {
		var id = ++echo_Echo.__IDSEQUENCE;
		this.entitiesMap.h[id] = id;
		this.entities.add(id);
		return id;
	}
};
var haxe_IMap = function() { };
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
};
ComponentHolder_$Example_$Position.__MAP = new haxe_ds_IntMap();
ComponentHolder_$Example_$Sprite.__MAP = new haxe_ds_IntMap();
ComponentHolder_$Example_$Velocity.__MAP = new haxe_ds_IntMap();
Example.w = 60;
Example.h = 30;
Render.__meta__ = { fields : { updateVisual : { update : null}}};
echo_Echo.__IDSEQUENCE = 0;
Example.main();
})();
