// Generated by Haxe 4.0.0-rc.1+1fdd3d59b
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
};
var echos_Workflow = function() { };
echos_Workflow.__name__ = true;
echos_Workflow.regComponentContainer = function(cc) {
	echos_Workflow.__componentContainers.push(cc);
};
echos_Workflow.toString = function() {
	var ret = "# ( " + echos_Workflow.systems.length + " ) { " + echos_Workflow.views.length + " } [ " + echos_Workflow.entities.length + " | " + echos_Workflow.idsCache.length + " ]";
	ret += " : " + echos_Workflow.times.h[-2] + " ms";
	var _g_head = echos_Workflow.systems.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		ret += "\n        (" + Std.string(val) + ") : " + echos_Workflow.times.h[val.__id] + " ms";
	}
	var _g1_head = echos_Workflow.views.h;
	while(_g1_head != null) {
		var val1 = _g1_head.item;
		_g1_head = _g1_head.next;
		ret += "\n    {" + Std.string(val1) + "} [" + val1.entities.length + "]";
	}
	return ret;
};
echos_Workflow.update = function(dt) {
	var engineUpdateStartTimestamp = new Date().getTime();
	var _g_head = echos_Workflow.systems.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var systemUpdateStartTimestamp = new Date().getTime();
		val.update(dt);
		var this1 = echos_Workflow.times;
		var key = val.__id;
		var value = new Date().getTime() - systemUpdateStartTimestamp | 0;
		this1.h[key] = value;
	}
	var this11 = echos_Workflow.times;
	var value1 = new Date().getTime() - engineUpdateStartTimestamp | 0;
	this11.h[-2] = value1;
};
echos_Workflow.addSystem = function(s) {
	echos_Workflow.systems.add(s);
	s.activate();
};
echos_Workflow.id = function(immediate) {
	var id = echos_Workflow.idsCache.length > 0 ? echos_Workflow.idsCache.pop() : ++echos_Workflow.__entitySequence;
	if(immediate) {
		echos_Workflow.ids.h[id] = 1;
		echos_Workflow.entities.add(id);
	} else {
		echos_Workflow.ids.h[id] = 0;
	}
	return id;
};
echos_Workflow.cache = function(id) {
	if((echos_Workflow.ids.h.hasOwnProperty(id) ? echos_Workflow.ids.h[id] : 3) < 2) {
		echos_Workflow.remove(id);
		echos_Workflow.removeComponents(id);
		echos_Workflow.idsCache.push(id);
		echos_Workflow.ids.h[id] = 2;
	}
};
echos_Workflow.remove = function(id) {
	if((echos_Workflow.ids.h.hasOwnProperty(id) ? echos_Workflow.ids.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.removeIfMatch(id);
		}
		echos_Workflow.entities.remove(id);
		echos_Workflow.ids.h[id] = 0;
	}
};
echos_Workflow.removeComponents = function(id) {
	var _g = 0;
	var _g1 = echos_Workflow.__componentContainers;
	while(_g < _g1.length) _g1[_g++].remove(id);
};
var ComponentContainer_$Main_$Animal = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Animal.__name__ = true;
ComponentContainer_$Main_$Animal.inst = function() {
	return ComponentContainer_$Main_$Animal.instance;
};
var ComponentContainer_$Main_$Position = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Position.__name__ = true;
ComponentContainer_$Main_$Position.inst = function() {
	return ComponentContainer_$Main_$Position.instance;
};
var ComponentContainer_$Main_$Sprite = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Sprite.__name__ = true;
ComponentContainer_$Main_$Sprite.inst = function() {
	return ComponentContainer_$Main_$Sprite.instance;
};
var ComponentContainer_$Main_$Timer = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Timer.__name__ = true;
ComponentContainer_$Main_$Timer.inst = function() {
	return ComponentContainer_$Main_$Timer.instance;
};
var ComponentContainer_$Main_$Velocity = function() {
	this.components = echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new();
	echos_Workflow.regComponentContainer(this.components);
};
ComponentContainer_$Main_$Velocity.__name__ = true;
ComponentContainer_$Main_$Velocity.inst = function() {
	return ComponentContainer_$Main_$Velocity.instance;
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var canvas = window.document.createElement("div");
	canvas.classList.add("meatdow");
	var info = window.document.createElement("pre");
	info.classList.add("info");
	window.document.body.appendChild(canvas);
	window.document.body.appendChild(info);
	var size = Std.parseInt(window.getComputedStyle(canvas).fontSize);
	var w = Math.floor(window.innerWidth / size);
	var h = Math.floor(window.innerHeight / size);
	var population = Math.max(w * h / 50,10) | 0;
	echos_Workflow.addSystem(new Play(population));
	echos_Workflow.addSystem(new Movement(w,h));
	echos_Workflow.addSystem(new Render(w,h,size,canvas));
	echos_Workflow.addSystem(new InteractionEvent());
	echos_Workflow.addSystem(new Info(info));
	var _g = 0;
	while(_g < h) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < w) {
			var x = _g1++;
			if(Math.random() < .75) {
				Main.grass(x,y);
			} else if(Math.random() < .25) {
				Main.tree(x,y);
			} else {
				Main.flower(x,y);
			}
		}
	}
	var _g2 = 0;
	while(_g2 < population) {
		++_g2;
		Main.rabbit(Std.random(w),Std.random(h));
	}
	Main.tiger(Std.random(w),Std.random(h));
	var fps = 60;
	window.setInterval(function() {
		echos_Workflow.update(fps / 1000);
	},fps);
};
Main.grass = function(x,y) {
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = new Vec2(x,y);
	var _this = ComponentContainer_$Main_$Sprite.instance;
	var value = Main.randomEmoji(Main.GRASS);
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "125%";
	this1.innerHTML = value;
	_this.components.h[id] = this1;
	if((echos_Workflow.ids.h.hasOwnProperty(id) ? echos_Workflow.ids.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.tree = function(x,y) {
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = new Vec2(x,y);
	var _this = ComponentContainer_$Main_$Sprite.instance;
	var value = Main.randomEmoji(Main.TREE);
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "175%";
	this1.innerHTML = value;
	_this.components.h[id] = this1;
	if((echos_Workflow.ids.h.hasOwnProperty(id) ? echos_Workflow.ids.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.flower = function(x,y) {
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = new Vec2(x,y);
	var _this = ComponentContainer_$Main_$Sprite.instance;
	var value = Main.randomEmoji(Main.FLOWER);
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "125%";
	this1.innerHTML = value;
	_this.components.h[id] = this1;
	if((echos_Workflow.ids.h.hasOwnProperty(id) ? echos_Workflow.ids.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.rabbit = function(x,y) {
	var this1 = new Vec2(x,y);
	var vel = Main.randomVelocity(1);
	var this2 = window.document.createElement("span");
	this2.style.position = "absolute";
	this2.style.right = "0px";
	this2.style.bottom = "0px";
	this2.style.fontSize = "125%";
	this2.innerHTML = "&#x1F407;";
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = this1;
	ComponentContainer_$Main_$Velocity.instance.components.h[id] = vel;
	ComponentContainer_$Main_$Sprite.instance.components.h[id] = this2;
	ComponentContainer_$Main_$Animal.instance.components.h[id] = Animal.Rabbit;
	if((echos_Workflow.ids.h.hasOwnProperty(id) ? echos_Workflow.ids.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.tiger = function(x,y) {
	var this1 = new Vec2(x,y);
	var vel = Main.randomVelocity(10);
	var this2 = window.document.createElement("span");
	this2.style.position = "absolute";
	this2.style.right = "0px";
	this2.style.bottom = "0px";
	this2.style.fontSize = "150%";
	this2.innerHTML = "&#x1F405;";
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = this1;
	ComponentContainer_$Main_$Velocity.instance.components.h[id] = vel;
	ComponentContainer_$Main_$Sprite.instance.components.h[id] = this2;
	ComponentContainer_$Main_$Animal.instance.components.h[id] = Animal.Tiger;
	if((echos_Workflow.ids.h.hasOwnProperty(id) ? echos_Workflow.ids.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.event = function(x,y,type,cb) {
	var code;
	switch(type) {
	case "heart":
		code = "&#x1F498;";
		break;
	case "skull":
		code = "&#x1F480;";
		break;
	default:
		code = "";
	}
	var id = echos_Workflow.id(true);
	ComponentContainer_$Main_$Position.instance.components.h[id] = new Vec2(x,y);
	var _this = ComponentContainer_$Main_$Sprite.instance;
	var this1 = window.document.createElement("span");
	this1.style.position = "absolute";
	this1.style.right = "0px";
	this1.style.bottom = "0px";
	this1.style.fontSize = "125%";
	this1.innerHTML = code;
	_this.components.h[id] = this1;
	ComponentContainer_$Main_$Timer.instance.components.h[id] = new Timer(5.0,cb);
	if((echos_Workflow.ids.h.hasOwnProperty(id) ? echos_Workflow.ids.h[id] : 3) == 1) {
		var _g_head = echos_Workflow.views.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.addIfMatch(id);
		}
	}
};
Main.randomEmoji = function(codes) {
	return codes[Std.random(codes.length)];
};
Main.randomVelocity = function(speed) {
	var d = Math.random() * Math.PI * 2;
	return new Vec2(Math.cos(d) * speed,Math.sin(d) * speed);
};
var Vec2 = function(x,y) {
	this.x = x != null ? x : .0;
	this.y = y != null ? y : .0;
};
Vec2.__name__ = true;
var Animal = $hxEnums["Animal"] = { __ename__ : true, __constructs__ : ["Rabbit","Tiger"]
	,Rabbit: {_hx_index:0,__enum__:"Animal",toString:$estr}
	,Tiger: {_hx_index:1,__enum__:"Animal",toString:$estr}
};
var Timer = function(timeout,cb) {
	this.time = .0;
	this.timeout = timeout;
	this.cb = cb;
};
Timer.__name__ = true;
var echos_System = function() {
	this.__id = ++echos_System.sequence;
};
echos_System.__name__ = true;
echos_System.prototype = {
	activate: function() {
	}
	,update: function(dt) {
	}
	,toString: function() {
		return "System";
	}
};
var Info = function(element) {
	echos_System.call(this);
	this.element = element;
};
Info.__name__ = true;
Info.__super__ = echos_System;
Info.prototype = $extend(echos_System.prototype,{
	print: function() {
		var tmp = echos_Workflow.toString();
		this.element.innerHTML = "" + tmp;
	}
	,update: function(dt) {
		this.print();
	}
	,activate: function() {
	}
	,toString: function() {
		return "Main.Info";
	}
});
var Movement = function(w,h) {
	echos_System.call(this);
	this.w = w;
	this.h = h;
};
Movement.__name__ = true;
Movement.__super__ = echos_System;
Movement.prototype = $extend(echos_System.prototype,{
	update: function(dt) {
		var _gthis = this;
		var _this = this.view_main_position_main_velocity;
		var _g_head = _this.entities.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var pos = _this.position.components.h[val];
			var vel = _this.velocity.components.h[val];
			var dx = vel.x * dt;
			var dy = vel.y * dt;
			if(pos.x + dx > _gthis.w - 1 || pos.x + dx < 0) {
				vel.x *= -1;
			}
			if(pos.y + dy > _gthis.h - 1 || pos.y + dy < 0) {
				vel.y *= -1;
			}
			pos.x += dx;
			pos.y += dy;
		}
	}
	,activate: function() {
		this.view_main_position_main_velocity = View_$Main_$Position_$Main_$Velocity.instance;
		this.view_main_position_main_velocity.activate();
	}
	,toString: function() {
		return "Main.Movement";
	}
});
var Render = function(w,h,size,canvas) {
	this.world = [];
	echos_System.call(this);
	var _g = 0;
	while(_g < h) {
		var y = _g++;
		this.world[y] = [];
		var _g1 = 0;
		while(_g1 < w) {
			var x = _g1++;
			var span = window.document.createElement("span");
			span.style.position = "absolute";
			span.style.left = "" + (x + 1) * size + "px";
			span.style.top = "" + (y + 1) * size + "px";
			this.world[y][x] = span;
			canvas.appendChild(span);
		}
		canvas.appendChild(window.document.createElement("br"));
	}
};
Render.__name__ = true;
Render.__super__ = echos_System;
Render.prototype = $extend(echos_System.prototype,{
	update: function(dt) {
		var _gthis = this;
		var _this = this.view_main_position_main_sprite_main_velocity;
		var _g_head = _this.entities.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var pos = _this.position.components.h[val];
			_gthis.world[pos.y | 0][pos.x | 0].appendChild(_this.sprite.components.h[val]);
		}
	}
	,activate: function() {
		var _gthis = this;
		this.__appendSprite = function(id,pos,spr) {
			_gthis.world[pos.y | 0][pos.x | 0].appendChild(spr);
		};
		this.__detachSprite = function(id1,pos1,spr1) {
			spr1.remove();
		};
		this.view_main_position_main_sprite_main_velocity = View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.instance;
		this.view_main_position_main_sprite_main_velocity.activate();
		this.view_main_position_main_sprite = View_$Main_$Position_$Main_$Sprite.instance;
		this.view_main_position_main_sprite.activate();
		this.view_main_position_main_sprite.onAdded.push(this.__appendSprite);
		this.view_main_position_main_sprite.onRemoved.push(this.__detachSprite);
		var _this = this.view_main_position_main_sprite;
		var f = this.__appendSprite;
		var _g_head = _this.entities.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			f(val,_this.position.components.h[val],_this.sprite.components.h[val]);
		}
	}
	,toString: function() {
		return "Main.Render";
	}
});
var Play = function(population) {
	this.del = [];
	echos_System.call(this);
	this.maxPopulation = population;
	this.population = this.maxPopulation;
};
Play.__name__ = true;
Play.__super__ = echos_System;
Play.prototype = $extend(echos_System.prototype,{
	test: function(pos1,pos2,radius) {
		var dx = pos2.x - pos1.x;
		var dy = pos2.y - pos1.y;
		return dx * dx + dy * dy < radius * radius;
	}
	,update: function(dt) {
		var _gthis = this;
		var _this = this.animals;
		var _g_head = _this.entities.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var a1 = _this.animal.components.h[val];
			var pos1 = _this.position.components.h[val];
			var vel1 = _this.velocity.components.h[val];
			var _this1 = _gthis.animals;
			var _g_head1 = _this1.entities.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var a2 = _this1.animal.components.h[val1];
				var pos2 = _this1.position.components.h[val1];
				var vel2 = _this1.velocity.components.h[val1];
				if(val != val1 && _gthis.test(pos1,pos2,1.41)) {
					if(a1 == Animal.Tiger && a2 == Animal.Rabbit) {
						console.log("example/Main.hx:270:","#" + val + " eats #" + val1);
						Main.event(pos1.x,pos1.y,"skull",null);
						_gthis.del.push(val1);
						_gthis.population--;
					}
					if(a1 == Animal.Rabbit && a2 == Animal.Rabbit) {
						vel1.x *= -1;
						vel1.y *= -1;
						vel2.x *= -1;
						vel2.y *= -1;
						if(_gthis.population < _gthis.maxPopulation) {
							var x = [(pos1.x + pos2.x) / 2];
							var y = [(pos1.y + pos2.y) / 2];
							Main.event(x[0],y[0],"heart",(function(y1,x1) {
								return function() {
									Main.rabbit(x1[0],y1[0]);
								};
							})(y,x));
							_gthis.population++;
						}
					}
				}
			}
		}
		while(this.del.length > 0) echos__$Entity_Entity_$Impl_$.destroy(this.del.pop());
	}
	,activate: function() {
		this.animals = View_$Main_$Animal_$Main_$Position_$Main_$Velocity.instance;
		this.animals.activate();
	}
	,toString: function() {
		return "Main.Play";
	}
});
var InteractionEvent = function() {
	echos_System.call(this);
};
InteractionEvent.__name__ = true;
InteractionEvent.__super__ = echos_System;
InteractionEvent.prototype = $extend(echos_System.prototype,{
	update: function(dt) {
		var _this = this.view_main_sprite_main_timer;
		var _g_head = _this.entities.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var t = _this.timer.components.h[val];
			var s = _this.sprite.components.h[val];
			s.style.opacity = "" + (1.0 - t.time / t.timeout);
			s.style.fontSize = "" + (100 + (t.time / t.timeout * 75 | 0)) + "%";
			t.time += dt;
			if(t.time >= t.timeout) {
				s.style.opacity = ".0";
				if(t.cb != null) {
					t.cb();
				}
				echos__$Entity_Entity_$Impl_$.destroy(val);
			}
		}
	}
	,activate: function() {
		this.view_main_sprite_main_timer = View_$Main_$Sprite_$Main_$Timer.instance;
		this.view_main_sprite_main_timer.activate();
	}
	,toString: function() {
		return "Main.InteractionEvent";
	}
});
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var echos_ViewBase = function() {
	this.entities = new haxe_ds_List();
	this.entitiesMap = new haxe_ds_IntMap();
	this.activated = false;
};
echos_ViewBase.__name__ = true;
echos_ViewBase.prototype = {
	activate: function() {
		if(!this.activated) {
			echos_Workflow.views.add(this);
			var _g_head = echos_Workflow.entities.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				this.addIfMatch(val);
			}
			this.activated = true;
		}
	}
	,isMatch: function(id) {
		return false;
	}
	,add: function(id) {
		this.entitiesMap.h[id] = id;
		this.entities.add(id);
	}
	,remove: function(id) {
		this.entities.remove(id);
		this.entitiesMap.remove(id);
	}
	,addIfMatch: function(id) {
		if(!this.entitiesMap.h.hasOwnProperty(id) && this.isMatch(id)) {
			this.add(id);
		}
	}
	,removeIfMatch: function(id) {
		if(this.entitiesMap.h.hasOwnProperty(id)) {
			this.remove(id);
		}
	}
	,toString: function() {
		return "ViewBase";
	}
};
var View_$Main_$Animal_$Main_$Position_$Main_$Velocity = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
	this.activate();
};
View_$Main_$Animal_$Main_$Position_$Main_$Velocity.__name__ = true;
View_$Main_$Animal_$Main_$Position_$Main_$Velocity.inst = function() {
	return View_$Main_$Animal_$Main_$Position_$Main_$Velocity.instance;
};
View_$Main_$Animal_$Main_$Position_$Main_$Velocity.__super__ = echos_ViewBase;
View_$Main_$Animal_$Main_$Position_$Main_$Velocity.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,this.animal.components.h[id],this.position.components.h[id],this.velocity.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,this.animal.components.h[id],this.position.components.h[id],this.velocity.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,activate: function() {
		this.animal = ComponentContainer_$Main_$Animal.instance;
		this.position = ComponentContainer_$Main_$Position.instance;
		this.velocity = ComponentContainer_$Main_$Velocity.instance;
		echos_ViewBase.prototype.activate.call(this);
	}
	,isMatch: function(id) {
		if(this.animal.components.h[id] != null && this.position.components.h[id] != null) {
			return this.velocity.components.h[id] != null;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Main.Animal,Main.Position,Main.Velocity";
	}
});
var View_$Main_$Position_$Main_$Sprite = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
	this.activate();
};
View_$Main_$Position_$Main_$Sprite.__name__ = true;
View_$Main_$Position_$Main_$Sprite.inst = function() {
	return View_$Main_$Position_$Main_$Sprite.instance;
};
View_$Main_$Position_$Main_$Sprite.__super__ = echos_ViewBase;
View_$Main_$Position_$Main_$Sprite.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,this.position.components.h[id],this.sprite.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,this.position.components.h[id],this.sprite.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,activate: function() {
		this.position = ComponentContainer_$Main_$Position.instance;
		this.sprite = ComponentContainer_$Main_$Sprite.instance;
		echos_ViewBase.prototype.activate.call(this);
	}
	,isMatch: function(id) {
		if(this.position.components.h[id] != null) {
			return this.sprite.components.h[id] != null;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Main.Position,Main.Sprite";
	}
});
var View_$Main_$Position_$Main_$Sprite_$Main_$Velocity = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
	this.activate();
};
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.__name__ = true;
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.inst = function() {
	return View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.instance;
};
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.__super__ = echos_ViewBase;
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,this.velocity.components.h[id],this.position.components.h[id],this.sprite.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,this.velocity.components.h[id],this.position.components.h[id],this.sprite.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,activate: function() {
		this.velocity = ComponentContainer_$Main_$Velocity.instance;
		this.position = ComponentContainer_$Main_$Position.instance;
		this.sprite = ComponentContainer_$Main_$Sprite.instance;
		echos_ViewBase.prototype.activate.call(this);
	}
	,isMatch: function(id) {
		if(this.velocity.components.h[id] != null && this.position.components.h[id] != null) {
			return this.sprite.components.h[id] != null;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Main.Position,Main.Sprite,Main.Velocity";
	}
});
var View_$Main_$Position_$Main_$Velocity = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
	this.activate();
};
View_$Main_$Position_$Main_$Velocity.__name__ = true;
View_$Main_$Position_$Main_$Velocity.inst = function() {
	return View_$Main_$Position_$Main_$Velocity.instance;
};
View_$Main_$Position_$Main_$Velocity.__super__ = echos_ViewBase;
View_$Main_$Position_$Main_$Velocity.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,this.position.components.h[id],this.velocity.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,this.position.components.h[id],this.velocity.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,activate: function() {
		this.position = ComponentContainer_$Main_$Position.instance;
		this.velocity = ComponentContainer_$Main_$Velocity.instance;
		echos_ViewBase.prototype.activate.call(this);
	}
	,isMatch: function(id) {
		if(this.position.components.h[id] != null) {
			return this.velocity.components.h[id] != null;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Main.Position,Main.Velocity";
	}
});
var View_$Main_$Sprite_$Main_$Timer = function() {
	this.onRemoved = [];
	this.onAdded = [];
	echos_ViewBase.call(this);
	this.activate();
};
View_$Main_$Sprite_$Main_$Timer.__name__ = true;
View_$Main_$Sprite_$Main_$Timer.inst = function() {
	return View_$Main_$Sprite_$Main_$Timer.instance;
};
View_$Main_$Sprite_$Main_$Timer.__super__ = echos_ViewBase;
View_$Main_$Sprite_$Main_$Timer.prototype = $extend(echos_ViewBase.prototype,{
	add: function(id) {
		echos_ViewBase.prototype.add.call(this,id);
		var i = 0;
		var l = this.onAdded.length;
		while(i < l) {
			var listener = this.onAdded[i];
			if(listener != null) {
				listener(id,this.timer.components.h[id],this.sprite.components.h[id]);
				++i;
			} else {
				this.onAdded.splice(i,1);
				--l;
			}
		}
	}
	,remove: function(id) {
		var i = 0;
		var l = this.onRemoved.length;
		while(i < l) {
			var listener = this.onRemoved[i];
			if(listener != null) {
				listener(id,this.timer.components.h[id],this.sprite.components.h[id]);
				++i;
			} else {
				this.onRemoved.splice(i,1);
				--l;
			}
		}
		echos_ViewBase.prototype.remove.call(this,id);
	}
	,activate: function() {
		this.timer = ComponentContainer_$Main_$Timer.instance;
		this.sprite = ComponentContainer_$Main_$Sprite.instance;
		echos_ViewBase.prototype.activate.call(this);
	}
	,isMatch: function(id) {
		if(this.timer.components.h[id] != null) {
			return this.sprite.components.h[id] != null;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Main.Sprite,Main.Timer";
	}
});
var echos__$Entity_Entity_$Impl_$ = {};
echos__$Entity_Entity_$Impl_$.__name__ = true;
echos__$Entity_Entity_$Impl_$.destroy = function(this1) {
	echos_Workflow.cache(this1);
};
var echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$ = {};
echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$.__name__ = true;
echos_macro__$ComponentMacro_IntMapComponentContainer_$Impl_$._new = function() {
	return new haxe_ds_IntMap();
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = true;
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
echos_Workflow.__entitySequence = -1;
echos_Workflow.__componentContainers = [];
echos_Workflow.idsCache = [];
echos_Workflow.ids = new haxe_ds_IntMap();
echos_Workflow.entities = new haxe_ds_List();
echos_Workflow.views = new haxe_ds_List();
echos_Workflow.systems = new haxe_ds_List();
echos_Workflow.times = new haxe_ds_IntMap();
ComponentContainer_$Main_$Animal.instance = new ComponentContainer_$Main_$Animal();
ComponentContainer_$Main_$Position.instance = new ComponentContainer_$Main_$Position();
ComponentContainer_$Main_$Sprite.instance = new ComponentContainer_$Main_$Sprite();
ComponentContainer_$Main_$Timer.instance = new ComponentContainer_$Main_$Timer();
ComponentContainer_$Main_$Velocity.instance = new ComponentContainer_$Main_$Velocity();
Main.GRASS = ["&#x1F33E","&#x1F33F"];
Main.TREE = ["&#x1F332","&#x1F333"];
Main.FLOWER = ["&#x1F337","&#x1F339","&#x1F33B"];
echos_System.sequence = -1;
Info.__meta__ = { fields : { print : { u : null}}};
View_$Main_$Animal_$Main_$Position_$Main_$Velocity.instance = new View_$Main_$Animal_$Main_$Position_$Main_$Velocity();
View_$Main_$Position_$Main_$Sprite.instance = new View_$Main_$Position_$Main_$Sprite();
View_$Main_$Position_$Main_$Sprite_$Main_$Velocity.instance = new View_$Main_$Position_$Main_$Sprite_$Main_$Velocity();
View_$Main_$Position_$Main_$Velocity.instance = new View_$Main_$Position_$Main_$Velocity();
View_$Main_$Sprite_$Main_$Timer.instance = new View_$Main_$Sprite_$Main_$Timer();
Main.main();
})();
